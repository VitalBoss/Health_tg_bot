from aiogram.types import Message
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import  handlers.handlers_start as hs # WATER_NORM, CALLORIES_NORM, user_username
from datetime import datetime
from utils import translate, get_product_calories, calculate_calories_and_water
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
from aiogram.types import FSInputFile
from aiogram.types import BufferedInputFile
import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery

router2 = Router()
WATER = {}
CALLORIES = {}
TRAIN = {}
CALLORIE = None



@router2.message(Command('log_water'))
async def log_water(message: Message):
    water = message.text.split()
    if len(water) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")
        return
    
    amount = int(water[1].replace("–º–ª", ""))
    current_time = str(datetime.now().date())

    if hs.user_username not in WATER:
        WATER[hs.user_username] = dict()

    if not current_time in WATER[hs.user_username]:
        WATER[hs.user_username][current_time] = 0

    WATER[hs.user_username][current_time] += amount

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ –Ω–æ—Ä–º—ã
    remaining = hs.WATER_NORM - WATER[hs.user_username][current_time]

    if remaining > 0:
        await message.reply(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã. "
                             f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.")
    else:
        await message.reply(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã. "
                             f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É! üéâ")
        


@router2.message(Command('log_food'))
async def log_food(message: Message):
    global CALLORIE
    message_ = message.text.split()
    if len(message_) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    else:
        message_ = message_[1]
        en_message = await translate(message_)
        CALLORIE = await get_product_calories(en_message)
        CALLORIE *=100

        current_time = str(datetime.now().date())
        if not hs.user_username in CALLORIES:
            CALLORIES[hs.user_username] = dict()
        if not current_time in CALLORIES[hs.user_username]:
            CALLORIES[hs.user_username][current_time] = 0

        await message.answer(f"{message_} ‚Äî {CALLORIE} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")


@router2.message(lambda message: message.text.isdigit())
async def handle_number(message: Message):
    global CALLORIE
    number = int(message.text.strip())  
    current_time = str(datetime.now().date())
    CALLORIES[hs.user_username][current_time] += number*CALLORIE // 100
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ {number*CALLORIE // 100} –∫–∫–∞–ª.")


@router2.message(Command("log_workout"))
async def log_workout(message: Message):
    if len(message.text.split()) != 3:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")
        return
    _, activity, minute = message.text.split()

    try:
        duration = int(minute)
    except ValueError:
        await message.reply("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
        return

    if duration <= 0:
        await message.reply("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    total_calories, extra_water = calculate_calories_and_water(activity, duration)

    #---------------------------logging----------------------------
    current_time = str(datetime.now().date())
    if not hs.user_username in TRAIN:
            TRAIN[hs.user_username] = dict()
    if not current_time in TRAIN[hs.user_username]:
            TRAIN[hs.user_username][current_time] = 0
    TRAIN[hs.user_username][current_time] += total_calories


    #-------------------------------------------------------------

    response_message = f"{activity.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {total_calories} –∫–∫–∞–ª. "
    if extra_water > 0:
        response_message += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {extra_water} –º–ª –≤–æ–¥—ã."

    await message.answer(response_message)


@router2.message(Command("check_progress"))
async def check_progress(message: Message):
    current_time = str(datetime.now().date())
    if hs.user_username in WATER:
        if current_time in WATER[hs.user_username]:
            cur_water = WATER[hs.user_username][current_time]

            await message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n \
                                    –í–æ–¥–∞:\n \
                                    - –í—ã–ø–∏—Ç–æ: {cur_water} –º–ª –∏–∑ {hs.WATER_NORM}. \n\
                                    - –û—Å—Ç–∞–ª–æ—Å—å: {hs.WATER_NORM - cur_water}.")
        else:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–µ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é(")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å(")
        
    if hs.user_username in TRAIN:
        if current_time in CALLORIES[hs.user_username]:
            calorries_sum = CALLORIES[hs.user_username][current_time]
            total_calories = TRAIN[hs.user_username][current_time]
            await message.answer(f"–ö–∞–ª–æ—Ä–∏–∏:\n \
                                - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calorries_sum} –∫–∫–∞–ª –∏–∑ {hs.CALLORIES_NORM} –∫–∫–∞–ª. \n\
                                - –°–æ–∂–∂–µ–Ω–æ: {total_calories} –∫–∫–∞–ª. \n\
                                - –ë–∞–ª–∞–Ω—Å: {calorries_sum-total_calories} –∫–∫–∞–ª.")
        else:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–æ—Ä–∏—è—Ö –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é(")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º (TelegramNetworkError)
@router2.message(Command("plot_progress"))
async def check_progress(message: Message):
    def plot(x, y, title=""):
        plt.figure()
        plt.plot(x, y)
        plt.title(title)
        plt.xlabel('x')
        plt.ylabel('y')

        buf = BytesIO()
        plt.savefig(buf, format='png')
        plt.close()  
        buf.seek(0)  
        photo = BufferedInputFile(buf, filename='plot.png')
        return photo

    lst = [WATER, CALLORIES, TRAIN]
    title = ['–≤–æ–¥—ã', '–∫–∞–ª–æ—Ä–∏–π', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫']
    for elem in lst:
        keys = list(elem[hs.user_username].keys())
        values = [val for key, val in elem[hs.user_username].items()]
        photo = plot(keys, values, f"–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {title}")
        await message.answer_photo(photo=photo)


from aiogram.utils.keyboard import InlineKeyboardBuilder,InlineKeyboardButton

@router2.message(Command("recommendations"))
async def recommendations(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",callback_data="train"))
    builder.add(InlineKeyboardButton(text="–†–∞—Ü–∏–æ–Ω",callback_data="eat"))
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é",
        reply_markup=builder.as_markup()
    )

@router2.callback_query(F.data == "eat")
async def rec_eat(callback: CallbackQuery):
    s = '''–ü–µ–π—Ç–µ –≤–æ–¥—É: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—å–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã. –í–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.
    –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤.
    –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏: –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ—Ä—Ü–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –±–æ–ª–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º: –£–≤–∞–∂–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≥–æ–ª–æ–¥–∞ –∏ —Å—ã—Ç–æ—Å—Ç–∏, –Ω–µ –ø–µ—Ä–µ–∫—É—Å—ã–≤–∞–π—Ç–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        
    –ö–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É —Å–Ω–∏–∂–µ–Ω–∏—é –∫–∞–ª–æ—Ä–∏–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞ –∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏. '''

    await callback.message.answer(s)

@router2.callback_query(F.data == "train")
async def rec_train(callback: CallbackQuery):
    s = '''–ü–ª–∞–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—Å–µ–≥–æ —Ç–µ–ª–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–∞–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 30-60 –º–∏–Ω—É—Ç.
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–ª–∞–≤–∞—Ç—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é. –ù–∞–ø—Ä–∏–º–µ—Ä, 1-2 –º–∏–Ω—É—Ç—ã –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å —Å 1 –º–∏–Ω—É—Ç–æ–π –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–≤–∞–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—É—é –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.
    
    –í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø–ª–∞–≤–∞–Ω–∏—é, –≤–∫–ª—é—á–∏—Ç–µ –∞—ç—Ä–æ–±–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞, –±–µ–≥, –µ–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ. –≠—Ç–æ —É–∫—Ä–µ–ø–∏—Ç —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–º–æ–∂–µ—Ç —Å–∂–∏–≥–∞–Ω–∏—é –∫–∞–ª–æ—Ä–∏–π.
    '''
    await callback.message.answer(s)


    